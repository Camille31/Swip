package org.swip.addPredicates;

import java.io.*;
import java.util.ArrayList;

import org.apache.log4j.Logger;

/**
 * Manages the configuration file for AddPredicates.
 * <p>
 * For further explanations you can read the configuration file
 * generated by this application.
 * </p>
 * @author Guillaume PEYET
 */
public class Conf {
	/**
	 * Used to log in console.
	 */
	private static final Logger logger = Logger.getLogger(Conf.class);
	
	/**
	 * The program will ignore all resources which have the prefix in the
	 * list defined by this variable.
	 */
	private ArrayList<String> ignoredPrefixes = null;
	
	/**
	 * Determines the execution mode of the program :
	 * <ul><li>
	 * AUTO : the value of each added predicates are generated automatically, it is
	 * extracted from the URI's resource concerned.
	 * </li><li>
	 * SEMIAUTO : a value of each added predicates are generated automatically in the
	 * same way as in the AUTO mode, but you have the possibility to change it.
	 * </li><li>
	 * MAN : you must enter manually the value of each predicate added.
	 * </li></ul>
	 */
	private String mode = null;
	
	/**
	 * Indicates the directory path where the knowledge base is located.
	 */
	private String kbPath = null;
	
	/**
	 * Indicates the directory path in which the generated files will be put into.
	 */
	private String generatedPath = null;
	
	/**
	 * The program will add a predicate to each resource which have not the
	 * searchedPredicate defined.
	 */
	private String searchedPredicate = null;
	
	/**
	 * Represents the predicate that will be added.
	 */
	private String addedPredicate = null;
	
	/**
	 * Represents the language tag of dataproperties literals values.
	 */
	private String languageTag = null;
	
	/**
	 * Represents the configuration file path.
	 */
	private String confPath = null;
	
	/**
	 * @return The ArrayList ignoredPrefixes.
	 */
	public ArrayList<String> getIgnoredPrefixes() {
		return ignoredPrefixes;
	}
	
	/**
	 * @return The String <code>mode</code>.
	 */
	public String getMode() {
		return mode;
	}
	
	/**
	 * @return The String <code>kbPath</code>.
	 */
	public String getKbPath() {
		return kbPath;
	}

	/**
	 * @return The String <code>generatedPath</code>.
	 */
	public String getGeneratedPath() {
		return generatedPath;
	}

	/**
	 * @return The String <code>searchedPredicate</code>.
	 */
	public String getSearchedPredicate() {
		return searchedPredicate;
	}
	
	/**
	 * @return The String <code>addedPredicate</code>.
	 */
	public String getAddedPredicate() {
		return addedPredicate;
	}
	
	/**
	 * @return The String <code>languageTag</code>.
	 */
	public String getLanguageTag() {
		return languageTag;
	}
	
	/**
	 * Call the constructor <code>Conf(path)</code>, with the default value of <code>path</code> : "&#46/addPredicates.conf".
	 */
	public Conf() {
		this("./addPredicates.conf");
	}
	
	/**
	 * Reads and parses the configuration file.
	 * If it can do that, it sets the default configurations.
	 * 
	 * @param path The path representing the configuration file.
	 */
	public Conf(String path) {
		try {
			this.loadConf(path);
		} catch (FileNotFoundException e) {
			this.setDefautConf();
		} catch (Exception e) {
			logger.error("Exception occurred trying to load the configuration file " + confPath + ".");
			e.printStackTrace();
		}
	}
	
	/**
	 * Sets the default configuration.
	 */
	public void setDefautConf() {
		// creates the configuration file.
		File confFile = null;
		try {
			confFile = new File(confPath);
			confFile.createNewFile();
		} catch (IOException e) { 
			logger.error("Impossible to create the configuration file...");
			logger.error("The program is going to stop...");
			e.printStackTrace();
			System.exit(1);
		}
		
		try {
			// write the default configuration file
			FileWriter fw = new FileWriter(confPath, false);
			BufferedWriter output = new BufferedWriter(fw);
			output.write("# This is the configuration file for AddPredicates. This application creates\n" +
					"# missing values of a given predicate for each resource of a knowledge base. With this\n" +
					"# application, you can only add dataproperties and litterals.\n\n" +
					
					"# In this file you can configure the behavior of AddPredicates.\n" +
					"# Each lines beginnig with the # character are comments and they are not\n" +
					"# interpreted. Spaces in property's definition are removed and\n" +
					"# the analysis is case insensitive, for better interpretation.\n\n" +
					
					"# If you want to set the default configuration, you just have to remove this file\n" +
					"# (it will be automatically generated when the application starts).\n" +
					"# If a value for a configuration property is missing, default value will be used,\n" +
					"# and it will be added to the configuration file.\n\n" +
					
					"# MODE can take 3 values :\n" +
					"#       - AUTO : the program will add the predicate automatically with the local name\n" +
					"#                extracted from the URI's resources (it separates by spaces the\n" +
					"#                differents words in the local part of the URI - which is located\n" +
					"#                after the last sharp or slash character - according to the CamelCase\n" +
					"#                standard, and it replaces underscores by spaces);\n" +
					"#       - SEMIAUTO : the program extract the name from the URI of resources and\n" +
					"#                    ask you if you want to modify the value;\n" +
					"#       - MAN : the program will ask you the value for each predicate added.\n" +
					"MODE = AUTO\n\n" +
					
					"# KB_PATH determines the path of the directory in which the knowledge base\n" +
					"# is located. It admits files with the extention \".owl\", \".ttl\", \".nt\"\n" +
					"# corresponding to OWL, TURTLE, N-TRIPLE formats.\n" +
					"KB_PATH = ./knowledge_base/\n\n" +
					
					"# GENERATED_PATH determines the path of the directory in which the files\n" +
					"# generated by AddPredicates will be placed.\n" +
					"GENERATED_PATH = ./generated_files/\n\n" +
					
					"# This application adds a new predicate for each entity which has not\n" +
					"# the predicate SEARCHED_PREDICATE defined.\n" +
					"# Specify null if you want to add a predicate to each entity of the knowlege base.\n" +
					"SEARCHED_PREDICATE = http://www.w3.org/2000/01/rdf-schema#label\n\n" +
					
					"# ADDED_PREDICATE represents the URI of the predicate which will be added to the\n" +
					"# knowledge base.\n" +
					"ADDED_PREDICATE = http://www.w3.org/2000/01/rdf-schema#label\n\n" +
					
					"# LANGUAGE_TAG specify the language tag of the litteral which is the value of\n" +
					"# the ADDED_PREDICATE. Specify null if you do not want to add language tags.\n" +
					"LANGUAGE_TAG = en\n\n" +
					
					"# All resources that have one of the prefixes described in the IGNORED_PREFIXES\n" +
					"# property are not taken into account. Specify null if you do not want to ignore resources.\n" +
					"IGNORED_PREFIXES = http://www.w3.org/2002/07/owl#,\n" +
					"                   http://www.w3.org/1999/02/22-rdf-syntax-ns#,\n" +
					"                   http://www.w3.org/2000/01/rdf-schema#,\n" +
					"                   http://www.w3.org/2001/XMLSchema#\n\n");
			output.flush();
			output.close();
			
			// set the defaults configurations
			mode = "AUTO";
			kbPath = "./knowledge_base/";
			generatedPath = "./generated_files/";
			searchedPredicate = "http://www.w3.org/2000/01/rdf-schema#label";
			addedPredicate = "http://www.w3.org/2000/01/rdf-schema#label";
			languageTag = "en";
			
			ignoredPrefixes = new ArrayList<String>();
			ignoredPrefixes.add("http://www.w3.org/2002/07/owl#");
			ignoredPrefixes.add("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
			ignoredPrefixes.add("http://www.w3.org/2000/01/rdf-schema#");
			ignoredPrefixes.add("http://www.w3.org/2001/XMLSchema#");
			
			File generatedDir = new File(generatedPath);
			if (!generatedDir.exists())
				generatedDir.mkdir();
			
			File kbDir = new File(kbPath);
			if (!kbDir.exists()) {
				kbDir.mkdir();
				logger.warn("The directory " + kbPath + " have been created.");
				logger.warn("Place your knowlage base files into this directory and run this program again.");
			}
		} catch (IOException e) { 
			e.printStackTrace();
		} 
	}
	
	/**
	 * Reads and parses the configuration file.
	 * It tries to extract all required properties.
	 * 
	 * @param path The path representing the configuration file.
	 * @throws IOException If the configuration file cannot be read (with BurreredReader / BurreredWriter).
	 */
	public void loadConf(String path) throws IOException {
		// save the path of the configuration file
		confPath = path;
		
		// try to read the configuration file
		BufferedReader reader = new BufferedReader(new FileReader(confPath));
		String line;
		boolean ignoredProperty = false;
		while ((line = reader.readLine()) != null)
		{
			if(!line.startsWith("#") && !line.equals("")) {
				String pureLine = line.replaceAll("\\s", "");
				
				// evaluation of each parameters.
				String[] params = pureLine.split("=");
				if (params.length == 2) {
					if (params[0].toUpperCase().equals("MODE")) {
						ignoredProperty = false;
						mode = params[1].toUpperCase();
						if (!(mode.equals("AUTO") || mode.equals("SEMIAUTO") || mode.equals("MAN"))) {
							mode = "AUTO";
							logger.error("The value of MODE property couldn't be determine (usage : AUTO, SEMIAUTO or MAN): " +
									"the default configuration was loaded (AUTO)");
						}
					} else if (params[0].toUpperCase().equals("KB_PATH")) {
						ignoredProperty = false;
						kbPath = params[1];
						File kbDir = new File(kbPath);
						if (!kbDir.exists()) {
							kbDir.mkdir();
							logger.warn("The directory " + kbPath + " have been created.");
							logger.warn("Place your knowledge base files into this directory and run this program again.");
						}
					} else if (params[0].toUpperCase().equals("GENERATED_PATH")) {
						ignoredProperty = false;
						generatedPath = params[1];
						File generatedDir = new File(generatedPath);
						if (!generatedDir.exists())
							generatedDir.mkdir();
					} else if (params[0].toUpperCase().equals("SEARCHED_PREDICATE")) {
						ignoredProperty = false;
						searchedPredicate = params[1];
					} else if (params[0].toUpperCase().equals("ADDED_PREDICATE")) {
						ignoredProperty = false;
						addedPredicate = params[1];
					} else if (params[0].toUpperCase().equals("LANGUAGE_TAG")){
						languageTag = params[1].toLowerCase();
					}else if (params[0].toUpperCase().equals("IGNORED_PREFIXES")) {
						ignoredPrefixes = new ArrayList<String>();
						if (!params[1].toLowerCase().equals("null")) {
							ignoredProperty = true;
							String[] prefixes = params[1].split(",");
							for(String str : prefixes){
								if (!str.equals("")){
									ignoredPrefixes.add(str);
								}
							}
						}
					}
				} else if (params != null && ignoredProperty) {
					String[] prefixes = params[0].split(",");
					for(String str : prefixes){
						if (!str.equals("")){
							ignoredPrefixes.add(str);
						}
					}
				}
			}
		}
		reader.close();
		
		// If some properties are not defined in the configuration file, this code add them.
		try {
			FileWriter fw = new FileWriter(confPath, true);
			BufferedWriter output = new BufferedWriter(fw);
			
			if (mode == null) {
				mode = "AUTO";
				output.write("# MODE can take 3 values :\n" +
						"#       - AUTO : the program will add the predicate automatically with the local name\n" +
						"#                extracted from the URI's resources (it separates by spaces the\n" +
						"#                differents words in the local part of the URI - which is located\n" +
						"#                after the last sharp or slash character - according to the CamelCase\n" +
						"#                standard, and it replaces underscores by spaces);\n" +
						"#       - SEMIAUTO : the program extract the name from the URI of resources and\n" +
						"#                    ask you if you want to modify the value;\n" +
						"#       - MAN : the program will ask you the value for each predicate added.\n" +
						"MODE = AUTO\n\n");
			}
			
			if (kbPath == null) {
				kbPath = "./knowledge_base/";
				output.write("# KB_PATH determines the path of the directory in which the knowledge base\n" +
						"# is located. It admits files with the extention \".owl\", \".ttl\", \".nt\"\n" +
						"# corresponding to OWL, TURTLE, N-TRIPLE formats.\n" +
						"KB_PATH = ./knowledge_base/\n\n");
			}
			
			if (generatedPath == null) {
				generatedPath = "./generated_files/";
				output.write("# GENERATED_PATH determines the path of the directory in which the files\n" +
						"# generated by AddPredicates will be placed.\n" +
						"GENERATED_PATH = ./generated_files/\n\n");
			}
			
			if (searchedPredicate == null) {
				searchedPredicate = "http://www.w3.org/2000/01/rdf-schema#label";
				output.write("# This application adds a new predicate for each entity which has not\n" +
						"# the predicate SEARCHED_PREDICATE defined.\n" +
						"# Specify null if you want to add a predicate to each entity of the knowlege base.\n" +
						"SEARCHED_PREDICATE = http://www.w3.org/2000/01/rdf-schema#label\n\n");
			}
			
			if (addedPredicate == null) {
				addedPredicate = "http://www.w3.org/2000/01/rdf-schema#label";
				output.write("# ADDED_PREDICATE represents the URI of the predicate which will be added to the\n" +
						"# knowledge base.\n" +
						"ADDED_PREDICATE = http://www.w3.org/2000/01/rdf-schema#label\n\n");
			}
			
			if (languageTag == null) {
				languageTag = "en";
				output.write("# LANGUAGE_TAG specify the language tag of the litteral which is the value of\n" +
					"# the ADDED_PREDICATE. Specify null if you do not want to add language tags.\n" +
					"LANGUAGE_TAG = en\n\n");
			}
			
			if (ignoredPrefixes == null) {
				ignoredPrefixes = new ArrayList<String>();
				ignoredPrefixes.add("http://www.w3.org/2002/07/owl#");
				ignoredPrefixes.add("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
				ignoredPrefixes.add("http://www.w3.org/2000/01/rdf-schema#");
				ignoredPrefixes.add("http://www.w3.org/2001/XMLSchema#");
				output.write("# All resources that have one of the prefixes described in the IGNORED_PREFIXES\n" +
						"# property are not taken into account. Specify null if you do not want to ignore resources.\n" +
						"IGNORED_PREFIXES = http://www.w3.org/2002/07/owl#,\n" +
						"                   http://www.w3.org/1999/02/22-rdf-syntax-ns#,\n" +
						"                   http://www.w3.org/2000/01/rdf-schema#,\n" +
						"                   http://www.w3.org/2001/XMLSchema#\n\n");
			}
			
			output.flush();
			output.close();
		} catch (IOException e) {
			logger.error("Unable to add missing properties in the configuration file...");
			e.printStackTrace();
		}
	}
}
